// Generated by gencpp from file pose_trajectory_controller/PoseTolerance.msg
// DO NOT EDIT!


#ifndef POSE_TRAJECTORY_CONTROLLER_MESSAGE_POSETOLERANCE_H
#define POSE_TRAJECTORY_CONTROLLER_MESSAGE_POSETOLERANCE_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <pose_trajectory_controller/EulerPose.h>
#include <pose_trajectory_controller/EulerPose.h>
#include <pose_trajectory_controller/EulerPose.h>

namespace pose_trajectory_controller
{
template <class ContainerAllocator>
struct PoseTolerance_
{
  typedef PoseTolerance_<ContainerAllocator> Type;

  PoseTolerance_()
    : name()
    , position()
    , velocity()
    , acceleration()  {
    }
  PoseTolerance_(const ContainerAllocator& _alloc)
    : name(_alloc)
    , position(_alloc)
    , velocity(_alloc)
    , acceleration(_alloc)  {
  (void)_alloc;
    }



   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _name_type;
  _name_type name;

   typedef  ::pose_trajectory_controller::EulerPose_<ContainerAllocator>  _position_type;
  _position_type position;

   typedef  ::pose_trajectory_controller::EulerPose_<ContainerAllocator>  _velocity_type;
  _velocity_type velocity;

   typedef  ::pose_trajectory_controller::EulerPose_<ContainerAllocator>  _acceleration_type;
  _acceleration_type acceleration;





  typedef boost::shared_ptr< ::pose_trajectory_controller::PoseTolerance_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::pose_trajectory_controller::PoseTolerance_<ContainerAllocator> const> ConstPtr;

}; // struct PoseTolerance_

typedef ::pose_trajectory_controller::PoseTolerance_<std::allocator<void> > PoseTolerance;

typedef boost::shared_ptr< ::pose_trajectory_controller::PoseTolerance > PoseTolerancePtr;
typedef boost::shared_ptr< ::pose_trajectory_controller::PoseTolerance const> PoseToleranceConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::pose_trajectory_controller::PoseTolerance_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::pose_trajectory_controller::PoseTolerance_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace pose_trajectory_controller

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': False}
// {'actionlib_msgs': ['/opt/ros/kinetic/share/actionlib_msgs/cmake/../msg'], 'std_msgs': ['/opt/ros/kinetic/share/std_msgs/cmake/../msg'], 'pose_trajectory_controller': ['/home/josh/catkin_ws_pose_traj_controller/src/pose_trajectory_controller/msg', '/home/josh/catkin_ws_pose_traj_controller/devel/share/pose_trajectory_controller/msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::pose_trajectory_controller::PoseTolerance_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::pose_trajectory_controller::PoseTolerance_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::pose_trajectory_controller::PoseTolerance_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::pose_trajectory_controller::PoseTolerance_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::pose_trajectory_controller::PoseTolerance_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::pose_trajectory_controller::PoseTolerance_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::pose_trajectory_controller::PoseTolerance_<ContainerAllocator> >
{
  static const char* value()
  {
    return "b6c811dc775d1a1107f86bf842c6228e";
  }

  static const char* value(const ::pose_trajectory_controller::PoseTolerance_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xb6c811dc775d1a11ULL;
  static const uint64_t static_value2 = 0x07f86bf842c6228eULL;
};

template<class ContainerAllocator>
struct DataType< ::pose_trajectory_controller::PoseTolerance_<ContainerAllocator> >
{
  static const char* value()
  {
    return "pose_trajectory_controller/PoseTolerance";
  }

  static const char* value(const ::pose_trajectory_controller::PoseTolerance_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::pose_trajectory_controller::PoseTolerance_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# The tolerances specify the amount the position, velocity, and\n\
# accelerations can vary from the setpoints.  For example, in the case\n\
# of trajectory control, when the actual position varies beyond\n\
# (desired position + position tolerance), the trajectory goal may\n\
# abort.\n\
#\n\
# There are two special values for tolerances:\n\
#  * 0 - The tolerance is unspecified and will remain at whatever the default is\n\
#  * -1 - The tolerance is \"erased\".  If there was a default, the joint will be\n\
#         allowed to move without restriction.\n\
\n\
string name\n\
EulerPose position  # in radians or meters (for a revolute or prismatic joint, respectively)\n\
EulerPose velocity  # in rad/sec or m/sec\n\
EulerPose acceleration  # in rad/sec^2 or m/sec^2\n\
\n\
================================================================================\n\
MSG: pose_trajectory_controller/EulerPose\n\
float64 x\n\
float64 y\n\
float64 z\n\
float64 r\n\
float64 p\n\
float64 w\n\
";
  }

  static const char* value(const ::pose_trajectory_controller::PoseTolerance_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::pose_trajectory_controller::PoseTolerance_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.name);
      stream.next(m.position);
      stream.next(m.velocity);
      stream.next(m.acceleration);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct PoseTolerance_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::pose_trajectory_controller::PoseTolerance_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::pose_trajectory_controller::PoseTolerance_<ContainerAllocator>& v)
  {
    s << indent << "name: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.name);
    s << indent << "position: ";
    s << std::endl;
    Printer< ::pose_trajectory_controller::EulerPose_<ContainerAllocator> >::stream(s, indent + "  ", v.position);
    s << indent << "velocity: ";
    s << std::endl;
    Printer< ::pose_trajectory_controller::EulerPose_<ContainerAllocator> >::stream(s, indent + "  ", v.velocity);
    s << indent << "acceleration: ";
    s << std::endl;
    Printer< ::pose_trajectory_controller::EulerPose_<ContainerAllocator> >::stream(s, indent + "  ", v.acceleration);
  }
};

} // namespace message_operations
} // namespace ros

#endif // POSE_TRAJECTORY_CONTROLLER_MESSAGE_POSETOLERANCE_H
