// Generated by gencpp from file pose_trajectory_controller/FollowPoseTrajectoryGoal.msg
// DO NOT EDIT!


#ifndef POSE_TRAJECTORY_CONTROLLER_MESSAGE_FOLLOWPOSETRAJECTORYGOAL_H
#define POSE_TRAJECTORY_CONTROLLER_MESSAGE_FOLLOWPOSETRAJECTORYGOAL_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <pose_trajectory_controller/PoseTrajectory.h>
#include <pose_trajectory_controller/AxisTolerance.h>
#include <pose_trajectory_controller/AxisTolerance.h>

namespace pose_trajectory_controller
{
template <class ContainerAllocator>
struct FollowPoseTrajectoryGoal_
{
  typedef FollowPoseTrajectoryGoal_<ContainerAllocator> Type;

  FollowPoseTrajectoryGoal_()
    : trajectory()
    , path_tolerance()
    , goal_tolerance()
    , goal_time_tolerance()  {
    }
  FollowPoseTrajectoryGoal_(const ContainerAllocator& _alloc)
    : trajectory(_alloc)
    , path_tolerance(_alloc)
    , goal_tolerance(_alloc)
    , goal_time_tolerance()  {
  (void)_alloc;
    }



   typedef  ::pose_trajectory_controller::PoseTrajectory_<ContainerAllocator>  _trajectory_type;
  _trajectory_type trajectory;

   typedef std::vector< ::pose_trajectory_controller::AxisTolerance_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::pose_trajectory_controller::AxisTolerance_<ContainerAllocator> >::other >  _path_tolerance_type;
  _path_tolerance_type path_tolerance;

   typedef std::vector< ::pose_trajectory_controller::AxisTolerance_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::pose_trajectory_controller::AxisTolerance_<ContainerAllocator> >::other >  _goal_tolerance_type;
  _goal_tolerance_type goal_tolerance;

   typedef ros::Duration _goal_time_tolerance_type;
  _goal_time_tolerance_type goal_time_tolerance;





  typedef boost::shared_ptr< ::pose_trajectory_controller::FollowPoseTrajectoryGoal_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::pose_trajectory_controller::FollowPoseTrajectoryGoal_<ContainerAllocator> const> ConstPtr;

}; // struct FollowPoseTrajectoryGoal_

typedef ::pose_trajectory_controller::FollowPoseTrajectoryGoal_<std::allocator<void> > FollowPoseTrajectoryGoal;

typedef boost::shared_ptr< ::pose_trajectory_controller::FollowPoseTrajectoryGoal > FollowPoseTrajectoryGoalPtr;
typedef boost::shared_ptr< ::pose_trajectory_controller::FollowPoseTrajectoryGoal const> FollowPoseTrajectoryGoalConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::pose_trajectory_controller::FollowPoseTrajectoryGoal_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::pose_trajectory_controller::FollowPoseTrajectoryGoal_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace pose_trajectory_controller

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': False}
// {'actionlib_msgs': ['/opt/ros/kinetic/share/actionlib_msgs/cmake/../msg'], 'std_msgs': ['/opt/ros/kinetic/share/std_msgs/cmake/../msg'], 'pose_trajectory_controller': ['/home/josh/catkin_ws_pose_traj_controller/src/pose_trajectory_controller/msg', '/home/josh/catkin_ws_pose_traj_controller/devel/share/pose_trajectory_controller/msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::pose_trajectory_controller::FollowPoseTrajectoryGoal_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::pose_trajectory_controller::FollowPoseTrajectoryGoal_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::pose_trajectory_controller::FollowPoseTrajectoryGoal_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::pose_trajectory_controller::FollowPoseTrajectoryGoal_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::pose_trajectory_controller::FollowPoseTrajectoryGoal_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::pose_trajectory_controller::FollowPoseTrajectoryGoal_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::pose_trajectory_controller::FollowPoseTrajectoryGoal_<ContainerAllocator> >
{
  static const char* value()
  {
    return "8f316eb647f63fa701471fe0fb5ee73a";
  }

  static const char* value(const ::pose_trajectory_controller::FollowPoseTrajectoryGoal_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x8f316eb647f63fa7ULL;
  static const uint64_t static_value2 = 0x01471fe0fb5ee73aULL;
};

template<class ContainerAllocator>
struct DataType< ::pose_trajectory_controller::FollowPoseTrajectoryGoal_<ContainerAllocator> >
{
  static const char* value()
  {
    return "pose_trajectory_controller/FollowPoseTrajectoryGoal";
  }

  static const char* value(const ::pose_trajectory_controller::FollowPoseTrajectoryGoal_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::pose_trajectory_controller::FollowPoseTrajectoryGoal_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======\n\
# The pose trajectory to follow\n\
pose_trajectory_controller/PoseTrajectory trajectory\n\
\n\
# Tolerances for the trajectory.  If the measured joint values fall\n\
# outside the tolerances the trajectory goal is aborted.  Any\n\
# tolerances that are not specified (by being omitted or set to 0) are\n\
# set to the defaults for the action server (often taken from the\n\
# parameter server).\n\
\n\
# Leave the tolerances in terms of joints for now to ease transition,\n\
# we can't get FK of the SP anyway so it doesn't really matter.\n\
\n\
# Tolerances applied to the joints as the trajectory is executed.  If\n\
# violated, the goal aborts with error_code set to\n\
# PATH_TOLERANCE_VIOLATED.\n\
pose_trajectory_controller/AxisTolerance[] path_tolerance\n\
\n\
# To report success, the joints must be within goal_tolerance of the\n\
# final trajectory value.  The goal must be achieved by time the\n\
# trajectory ends plus goal_time_tolerance.  (goal_time_tolerance\n\
# allows some leeway in time, so that the trajectory goal can still\n\
# succeed even if the joints reach the goal some time after the\n\
# precise end time of the trajectory).\n\
#\n\
# If the joints are not within goal_tolerance after \"trajectory finish\n\
# time\" + goal_time_tolerance, the goal aborts with error_code set to\n\
# GOAL_TOLERANCE_VIOLATED\n\
pose_trajectory_controller/AxisTolerance[] goal_tolerance\n\
duration goal_time_tolerance\n\
\n\
\n\
================================================================================\n\
MSG: pose_trajectory_controller/PoseTrajectory\n\
Header header\n\
string[] axis_names\n\
PoseTrajectoryPoint[] points\n\
\n\
================================================================================\n\
MSG: std_msgs/Header\n\
# Standard metadata for higher-level stamped data types.\n\
# This is generally used to communicate timestamped data \n\
# in a particular coordinate frame.\n\
# \n\
# sequence ID: consecutively increasing ID \n\
uint32 seq\n\
#Two-integer timestamp that is expressed as:\n\
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n\
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n\
# time-handling sugar is provided by the client library\n\
time stamp\n\
#Frame this data is associated with\n\
# 0: no frame\n\
# 1: global frame\n\
string frame_id\n\
\n\
================================================================================\n\
MSG: pose_trajectory_controller/PoseTrajectoryPoint\n\
float64[] positions\n\
float64[] velocities\n\
float64[] accelerations\n\
float64[] effort\n\
\n\
duration  time_from_start\n\
\n\
================================================================================\n\
MSG: pose_trajectory_controller/AxisTolerance\n\
# The tolerances specify the amount the position, velocity, and\n\
# accelerations can vary from the setpoints.  For example, in the case\n\
# of trajectory control, when the actual position varies beyond\n\
# (desired position + position tolerance), the trajectory goal may\n\
# abort.\n\
#\n\
# There are two special values for tolerances:\n\
#  * 0 - The tolerance is unspecified and will remain at whatever the default is\n\
#  * -1 - The tolerance is \"erased\".  If there was a default, the joint will be\n\
#         allowed to move without restriction.\n\
\n\
string name\n\
float64 position  # in radians or meters (for a rotary or linear axis, respectively)\n\
float64 velocity  # in rad/sec or m/sec\n\
float64 acceleration  # in rad/sec^2 or m/sec^2\n\
";
  }

  static const char* value(const ::pose_trajectory_controller::FollowPoseTrajectoryGoal_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::pose_trajectory_controller::FollowPoseTrajectoryGoal_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.trajectory);
      stream.next(m.path_tolerance);
      stream.next(m.goal_tolerance);
      stream.next(m.goal_time_tolerance);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct FollowPoseTrajectoryGoal_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::pose_trajectory_controller::FollowPoseTrajectoryGoal_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::pose_trajectory_controller::FollowPoseTrajectoryGoal_<ContainerAllocator>& v)
  {
    s << indent << "trajectory: ";
    s << std::endl;
    Printer< ::pose_trajectory_controller::PoseTrajectory_<ContainerAllocator> >::stream(s, indent + "  ", v.trajectory);
    s << indent << "path_tolerance[]" << std::endl;
    for (size_t i = 0; i < v.path_tolerance.size(); ++i)
    {
      s << indent << "  path_tolerance[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::pose_trajectory_controller::AxisTolerance_<ContainerAllocator> >::stream(s, indent + "    ", v.path_tolerance[i]);
    }
    s << indent << "goal_tolerance[]" << std::endl;
    for (size_t i = 0; i < v.goal_tolerance.size(); ++i)
    {
      s << indent << "  goal_tolerance[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::pose_trajectory_controller::AxisTolerance_<ContainerAllocator> >::stream(s, indent + "    ", v.goal_tolerance[i]);
    }
    s << indent << "goal_time_tolerance: ";
    Printer<ros::Duration>::stream(s, indent + "  ", v.goal_time_tolerance);
  }
};

} // namespace message_operations
} // namespace ros

#endif // POSE_TRAJECTORY_CONTROLLER_MESSAGE_FOLLOWPOSETRAJECTORYGOAL_H
