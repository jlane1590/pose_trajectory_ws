# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from pose_trajectory_controller/PoseTolerance.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import pose_trajectory_controller.msg

class PoseTolerance(genpy.Message):
  _md5sum = "b6c811dc775d1a1107f86bf842c6228e"
  _type = "pose_trajectory_controller/PoseTolerance"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """# The tolerances specify the amount the position, velocity, and
# accelerations can vary from the setpoints.  For example, in the case
# of trajectory control, when the actual position varies beyond
# (desired position + position tolerance), the trajectory goal may
# abort.
#
# There are two special values for tolerances:
#  * 0 - The tolerance is unspecified and will remain at whatever the default is
#  * -1 - The tolerance is "erased".  If there was a default, the joint will be
#         allowed to move without restriction.

string name
EulerPose position  # in radians or meters (for a revolute or prismatic joint, respectively)
EulerPose velocity  # in rad/sec or m/sec
EulerPose acceleration  # in rad/sec^2 or m/sec^2

================================================================================
MSG: pose_trajectory_controller/EulerPose
float64 x
float64 y
float64 z
float64 r
float64 p
float64 w
"""
  __slots__ = ['name','position','velocity','acceleration']
  _slot_types = ['string','pose_trajectory_controller/EulerPose','pose_trajectory_controller/EulerPose','pose_trajectory_controller/EulerPose']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       name,position,velocity,acceleration

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(PoseTolerance, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.name is None:
        self.name = ''
      if self.position is None:
        self.position = pose_trajectory_controller.msg.EulerPose()
      if self.velocity is None:
        self.velocity = pose_trajectory_controller.msg.EulerPose()
      if self.acceleration is None:
        self.acceleration = pose_trajectory_controller.msg.EulerPose()
    else:
      self.name = ''
      self.position = pose_trajectory_controller.msg.EulerPose()
      self.velocity = pose_trajectory_controller.msg.EulerPose()
      self.acceleration = pose_trajectory_controller.msg.EulerPose()

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self.name
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_get_struct_18d().pack(_x.position.x, _x.position.y, _x.position.z, _x.position.r, _x.position.p, _x.position.w, _x.velocity.x, _x.velocity.y, _x.velocity.z, _x.velocity.r, _x.velocity.p, _x.velocity.w, _x.acceleration.x, _x.acceleration.y, _x.acceleration.z, _x.acceleration.r, _x.acceleration.p, _x.acceleration.w))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      if self.position is None:
        self.position = pose_trajectory_controller.msg.EulerPose()
      if self.velocity is None:
        self.velocity = pose_trajectory_controller.msg.EulerPose()
      if self.acceleration is None:
        self.acceleration = pose_trajectory_controller.msg.EulerPose()
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.name = str[start:end].decode('utf-8')
      else:
        self.name = str[start:end]
      _x = self
      start = end
      end += 144
      (_x.position.x, _x.position.y, _x.position.z, _x.position.r, _x.position.p, _x.position.w, _x.velocity.x, _x.velocity.y, _x.velocity.z, _x.velocity.r, _x.velocity.p, _x.velocity.w, _x.acceleration.x, _x.acceleration.y, _x.acceleration.z, _x.acceleration.r, _x.acceleration.p, _x.acceleration.w,) = _get_struct_18d().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self.name
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_get_struct_18d().pack(_x.position.x, _x.position.y, _x.position.z, _x.position.r, _x.position.p, _x.position.w, _x.velocity.x, _x.velocity.y, _x.velocity.z, _x.velocity.r, _x.velocity.p, _x.velocity.w, _x.acceleration.x, _x.acceleration.y, _x.acceleration.z, _x.acceleration.r, _x.acceleration.p, _x.acceleration.w))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      if self.position is None:
        self.position = pose_trajectory_controller.msg.EulerPose()
      if self.velocity is None:
        self.velocity = pose_trajectory_controller.msg.EulerPose()
      if self.acceleration is None:
        self.acceleration = pose_trajectory_controller.msg.EulerPose()
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.name = str[start:end].decode('utf-8')
      else:
        self.name = str[start:end]
      _x = self
      start = end
      end += 144
      (_x.position.x, _x.position.y, _x.position.z, _x.position.r, _x.position.p, _x.position.w, _x.velocity.x, _x.velocity.y, _x.velocity.z, _x.velocity.r, _x.velocity.p, _x.velocity.w, _x.acceleration.x, _x.acceleration.y, _x.acceleration.z, _x.acceleration.r, _x.acceleration.p, _x.acceleration.w,) = _get_struct_18d().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_18d = None
def _get_struct_18d():
    global _struct_18d
    if _struct_18d is None:
        _struct_18d = struct.Struct("<18d")
    return _struct_18d
